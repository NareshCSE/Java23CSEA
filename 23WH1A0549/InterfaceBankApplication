import java.util.Scanner;

interface Bank {
    void createAccount(String accountHolder, double initialDeposit);
    void creditAmount(String accountHolder, double amount);
    void debitAmount(String accountHolder, double amount);
    void transferAmount(String fromAccount, String toAccount, double amount);
    void miniStatement(String accountHolder);
    double calculateInterest(double amount);
}

class SBI implements Bank {
    private String[] accountHolders = new String[10];
    private double[] balances = new double[10];
    private int accountCount = 0;
    private final double interestRate = 0.04;

    public void createAccount(String accountHolder, double initialDeposit) {
        if (accountCount < accountHolders.length) {
            accountHolders[accountCount] = accountHolder;
            balances[accountCount] = initialDeposit;
            System.out.println("SBI account created for " + accountHolder + " with amount " + initialDeposit);
            accountCount++;
        } else {
            System.out.println("Account limit reached.");
        }
    }

    public void creditAmount(String accountHolder, double amount) {
        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(accountHolder)) {
                balances[i] += amount;
                System.out.println("Credited " + amount + " into account of " + accountHolder);
                return;
            }
        }
        System.out.println("Account not found.");
    }

    public void debitAmount(String accountHolder, double amount) {
        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(accountHolder)) {
                if (balances[i] >= amount) {
                    balances[i] -= amount;
                    System.out.println("Debited " + amount + " from account of " + accountHolder);
                    return;
                } else {
                    System.out.println("Insufficient funds in account of " + accountHolder);
                    return;
                }
            }
        }
        System.out.println("Account not found.");
    }

    public void transferAmount(String fromAccount, String toAccount, double amount) {
        int fromIndex = -1;
        int toIndex = -1;

        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(fromAccount)) {
                fromIndex = i;
            }
            if (accountHolders[i].equals(toAccount)) {
                toIndex = i;
            }
        }

        if (fromIndex != -1 && toIndex != -1) {
            if (balances[fromIndex] >= amount) {
                balances[fromIndex] -= amount;
                balances[toIndex] += amount;
                System.out.println("Transferred " + amount + " from " + fromAccount + " to " + toAccount);
            } else {
                System.out.println("Insufficient balance to transfer from " + fromAccount);
            }
        } else {
            System.out.println("One or both accounts not found.");
        }
    }

    public void miniStatement(String accountHolder) {
        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(accountHolder)) {
                System.out.println("SBI: Mini statement for " + accountHolder + ", balance is " + balances[i]);
                return;
            }
        }
        System.out.println("Account not found.");
    }

    public double calculateInterest(double amount) {
        return amount * interestRate;
    }
}

class Axis implements Bank {
    private String[] accountHolders = new String[10];
    private double[] balances = new double[10];
    private int accountCount = 0;
    private final double interestRate = 0.05;

    public void createAccount(String accountHolder, double initialDeposit) {
        if (accountCount < accountHolders.length) {
            accountHolders[accountCount] = accountHolder;
            balances[accountCount] = initialDeposit;
            System.out.println("Axis account created for " + accountHolder + " with amount " + initialDeposit);
            accountCount++;
        } else {
            System.out.println("Account limit reached.");
        }
    }

    public void creditAmount(String accountHolder, double amount) {
        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(accountHolder)) {
                balances[i] += amount;
                System.out.println("Credited " + amount + " into account of " + accountHolder);
                return;
            }
        }
        System.out.println("Account not found.");
    }

    public void debitAmount(String accountHolder, double amount) {
        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(accountHolder)) {
                if (balances[i] >= amount) {
                    balances[i] -= amount;
                    System.out.println("Debited " + amount + " from account of " + accountHolder);
                    return;
                } else {
                    System.out.println("Insufficient funds in account of " + accountHolder);
                    return;
                }
            }
        }
        System.out.println("Account not found.");
    }

    public void transferAmount(String fromAccount, String toAccount, double amount) {
        int fromIndex = -1;
        int toIndex = -1;

        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(fromAccount)) {
                fromIndex = i;
            }
            if (accountHolders[i].equals(toAccount)) {
                toIndex = i;
            }
        }

        if (fromIndex != -1 && toIndex != -1) {
            if (balances[fromIndex] >= amount) {
                balances[fromIndex] -= amount;
                balances[toIndex] += amount;
                System.out.println("Transferred " + amount + " from " + fromAccount + " to " + toAccount);
            } else {
                System.out.println("Insufficient balance to transfer from " + fromAccount);
            }
        } else {
            System.out.println("One or both accounts not found.");
        }
    }

    public void miniStatement(String accountHolder) {
        for (int i = 0; i < accountCount; i++) {
            if (accountHolders[i].equals(accountHolder)) {
                System.out.println("Axis: Mini statement for " + accountHolder + ", balance is " + balances[i]);
                return;
            }
        }
        System.out.println("Account not found.");
    }

    public double calculateInterest(double amount) {
        return amount * interestRate;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Bank bank = null;

        System.out.println("Choose Bank: 1. SBI 2. Axis");
        int choice = scanner.nextInt();
        scanner.nextLine();

        if (choice == 1) {
            bank = new SBI();
        } else if (choice == 2) {
            bank = new Axis();
        } else {
            System.out.println("Invalid choice.");
            return;
        }

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Create Account");
            System.out.println("2. Credit Amount");
            System.out.println("3. Debit Amount");
            System.out.println("4. Transfer Amount");
            System.out.println("5. Mini Statement");
            System.out.println("6. Calculate Interest");
            System.out.println("7. Exit");
            System.out.print("Select an option: ");
            int option = scanner.nextInt();
            scanner.nextLine(); 

            switch (option) {
                case 1:
                    System.out.print("Enter Account Holder Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Initial Deposit: ");
                    double initialDeposit = scanner.nextDouble();
                    bank.createAccount(name, initialDeposit);
                    break;
                case 2:
                    System.out.print("Enter Account Holder Name: ");
                    String creditAccount = scanner.nextLine();
                    System.out.print("Enter Amount to Credit: ");
                    double creditAmount = scanner.nextDouble();
                    bank.creditAmount(creditAccount, creditAmount);
                    break;
                case 3:
                    System.out.print("Enter Account Holder Name: ");
                    String debitAccount = scanner.nextLine();
                    System.out.print("Enter Amount to Debit: ");
                    double debitAmount = scanner.nextDouble();
                    bank.debitAmount(debitAccount, debitAmount);
                    break;
                case 4:
                    System.out.print("Enter Source Account Holder Name: ");
                    String fromAccount = scanner.nextLine();
                    System.out.print("Enter Destination Account Holder Name: ");
                    String toAccount = scanner.nextLine();
                    System.out.print("Enter Amount to Transfer: ");
                    double transferAmount = scanner.nextDouble();
                    bank.transferAmount(fromAccount, toAccount, transferAmount);
                    break;
                case 5:
                    System.out.print("Enter Account Holder Name: ");
                    String statementAccount = scanner.nextLine();
                    bank.miniStatement(statementAccount);
                    break;
                case 6:
                    System.out.print("Enter Amount: ");
                    double principal = scanner.nextDouble();
                    double interest = bank.calculateInterest(principal);
                    System.out.println("Interest: " + interest);
                    break;
                case 7:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }
}
